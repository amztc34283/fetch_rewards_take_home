# generated by datamodel-codegen:
#   filename:  api.yml
#   timestamp: 2024-07-19T01:59:09+00:00

from __future__ import annotations

from datetime import date, time
from typing import List, Optional

from pydantic import BaseModel, Field, constr

'''
    This file is generated by datamodel-codegen from api.yml.
'''

class Item(BaseModel):
    shortDescription: constr(regex=r'^[\w\s\-]+$') = Field( # type: ignore
        ...,
        description='The Short Product Description for the item.',
        example='Mountain Dew 12PK',
    )
    price: constr(regex=r'^\d+\.\d{2}$') = Field( # type: ignore
        ..., description='The total price payed for this item.', example='6.49'
    )


class Receipt(BaseModel):
    retailer: constr(regex=r'^[\w\s\-&]+$') = Field( # type: ignore
        ...,
        description='The name of the retailer or store the receipt is from.',
        example='M&M Corner Market',
    )
    purchaseDate: date = Field(
        ...,
        description='The date of the purchase printed on the receipt.',
        example='2022-01-01',
    )
    purchaseTime: time = Field(
        ...,
        description='The time of the purchase printed on the receipt. 24-hour time expected.',
        example='13:01',
    )
    items: List[Item] = Field(..., min_items=1)
    total: constr(regex=r'^\d+\.\d{2}$') = Field( # type: ignore
        ..., description='The total amount paid on the receipt.', example='6.49'
    )

class ProcessReceiptResponse(BaseModel):
    id: constr(regex=r'^\S+$') = Field( # type: ignore
        ..., example='adb6b560-0eef-42bc-9d16-df48f30e89b2'
    )


class GetPointsResponse(BaseModel):
    points: Optional[int] = Field(None, example=100)